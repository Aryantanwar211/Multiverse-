---
// @/pages/dash/index.astro
export const prerender = false;

import DashboardLayout from "@/layouts/DashboardLayout.astro";
import ServerCard from "@/components/ui/dashboard/ServerCard.astro";
import { GuildManager } from "@/lib/database/mongoose";
import type { IGuild } from "@/lib/database/types/guild";

interface DiscordGuild {
  id: string;
  name: string;
  icon: string | null;
  owner: boolean;
  permissions: string;
  features: string[];
  approximate_member_count?: number;
}

interface DiscordUser {
  id: string;
  username: string;
  discriminator: string;
  avatar: string;
  bot?: boolean;
  system?: boolean;
  mfa_enabled?: boolean;
  verified?: boolean;
}

// The middleware will ensure we have valid tokens
const accessToken = Astro.cookies.get('discord_access_token')?.value;
if (!accessToken) {
  return Astro.redirect('/');  // Fallback safety check
}

let userData: DiscordUser | null = null;
let adminGuilds: DiscordGuild[] = [];
let configuredGuilds: IGuild[] = [];
let error: { message: string; code?: string } | null = null;
let loading = true;

try {
  // Get user data from Discord
  const userResponse = await fetch('https://discord.com/api/users/@me', {
    headers: { Authorization: `Bearer ${accessToken}` }
  });

  if (!userResponse.ok) {
    throw new Error(`Failed to fetch user data: ${userResponse.statusText}`);
  }

  userData = await userResponse.json();

  // Fetch user's guilds from Discord API with member counts
  const guildsResponse = await fetch('https://discord.com/api/users/@me/guilds?with_counts=true', {
    headers: { 
      Authorization: `Bearer ${accessToken}`,
      'Content-Type': 'application/json',
    }
  });

  if (!guildsResponse.ok) {
    throw new Error(`Failed to fetch guilds: ${guildsResponse.statusText}`);
  }

  const userGuilds: DiscordGuild[] = await guildsResponse.json();

  // Filter guilds where user has admin permissions (0x8)
  adminGuilds = userGuilds.filter(guild => {
    const permissions = BigInt(guild.permissions);
    return (permissions & 0x8n) === 0x8n;
  });

  // Get configured guilds from database
  const guildManager = await GuildManager.getInstance();
  const configuredGuildPromises = adminGuilds.map(guild => 
    guildManager.getGuild(guild.id)
  );
  
  const configuredGuildResults = await Promise.all(configuredGuildPromises);
  configuredGuilds = configuredGuildResults.filter((guild): guild is IGuild => guild !== null);

} catch (err) {
  const message = err instanceof Error ? err.message : 'An unknown error occurred';
  error = { message };
  console.error('Dashboard error:', err);
} finally {
  loading = false;
}

const baseUrl = import.meta.env.BASE_URL || '';
---

<DashboardLayout>
  {/* Loading State */}
  {loading && (
    <div class="container mx-auto px-4 py-8 animate-fade-in">
      <div class="mb-8 flex items-center gap-4">
        <div class="w-16 h-16 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
        <div class="flex-1">
          <div class="h-6 w-48 bg-gray-200 dark:bg-gray-700 rounded animate-pulse mb-2"></div>
          <div class="h-4 w-64 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
        </div>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {[...Array(6)].map(() => (
          <div class="bg-white dark:bg-neutral-800 rounded-lg shadow-sm p-4">
            <div class="flex items-center gap-4 mb-4">
              <div class="w-16 h-16 rounded-full bg-gray-200 dark:bg-gray-700 animate-pulse"></div>
              <div class="flex-1">
                <div class="h-5 w-32 bg-gray-200 dark:bg-gray-700 rounded animate-pulse mb-2"></div>
                <div class="h-4 w-24 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
              </div>
            </div>
            <div class="h-10 bg-gray-200 dark:bg-gray-700 rounded animate-pulse"></div>
          </div>
        ))}
      </div>
    </div>
  )}

  {/* Error State */}
  {error && (
    <div class="min-h-[80vh] flex items-center justify-center px-4 animate-fade-in">
      <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6 max-w-lg w-full">
        <h2 class="text-red-800 dark:text-red-200 text-lg font-semibold mb-2">
          {error.code === 'AUTH_ERROR' ? 'Authentication Error' : 'Something went wrong'}
        </h2>
        <p class="text-red-700 dark:text-red-300">
          {error.message}
        </p>
        <div class="mt-4 flex gap-4">
          {error.code === 'AUTH_ERROR' ? (
            <a
              href="/auth/login"
              class="inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Login Again
            </a>
          ) : (
            <button
              onclick="window.location.reload()"
              class="inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-red-600 bg-red-100 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
            >
              Try again
            </button>
          )}
        </div>
      </div>
    </div>
  )}

  {/* Content */}
  {!loading && !error && userData && (
    <div class="container mx-auto px-4 py-8 animate-fade-in">
      <!-- Welcome Section -->
      <div class="mb-8 flex items-center gap-4">
        <img 
          src={`https://cdn.discordapp.com/avatars/${userData.id}/${userData.avatar}.png`}
          alt={userData.username}
          class="w-16 h-16 rounded-full"
        />
        <div>
          <h1 class="text-2xl font-bold text-gray-900 dark:text-white">
            Welcome, {userData.username}!
          </h1>
          <p class="text-gray-600 dark:text-gray-400">
            Manage your Discord servers and bot settings
          </p>
        </div>
      </div>

      <!-- Server Grid -->
      {adminGuilds.length > 0 ? (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {adminGuilds.map(guild => (
            <ServerCard
              guild={guild}
              isConfigured={configuredGuilds.some(g => g._id === guild.id)}
              baseUrl={baseUrl}
            />
          ))}
        </div>
      ) : (
        <div class="text-center py-12 bg-gray-50 dark:bg-gray-800/50 rounded-lg">
          <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">
            No servers found
          </h3>
          <p class="text-gray-600 dark:text-gray-400 mb-4">
            You need to be a server administrator to manage bot settings.
          </p>
          <a 
            href="https://discord.com/servers" 
            target="_blank"
            rel="noopener noreferrer"
            class="inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-pink-600 hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500"
          >
            Find Servers
          </a>
        </div>
      )}
    </div>
  )}

  <style>
    .animate-fade-in {
      animation: fadeIn 0.3s ease-in-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>
</DashboardLayout>